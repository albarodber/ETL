head(reviews_agg)
#Cargo las tablas
dbWriteTable(bd, "distrib_alojam", listings_agg)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
#Librerias
library(dplyr)
library(DBI)
library(stringr)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
#Librerias
library(dplyr)
library(DBI)
library(stringr)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
listings_bd <- tbl(bd, sql("
SELECT L.id, L.room_type, L.price,
L.number_of_reviews, L.review_scores_rating,
H.neighbourhood_group
FROM Listings as L
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
"))
listings <- listings_bd %>% collect()
head(listings)
reviews_bd <- tbl(bd, sql("
SELECT H.neighbourhood_group, strftime('%Y-%m',
R.date) as mes, COUNT(R.comments) as num_reviews
FROM Reviews as R
INNER JOIN Listings as L ON R.listing_id = L.id
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
WHERE strftime('%Y', R.date) > '2010'
GROUP BY H.neighbourhood_group, mes
"))
reviews <- reviews_bd %>% collect()
head(reviews)
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
tbl(bd, sql("SELECT * FROM num_reviews_pred LIMIT 10"))
#Librerias
library(dplyr)
library(DBI)
library(stringr)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
listings_bd <- tbl(bd, sql("
SELECT L.id, L.room_type, L.price,
L.number_of_reviews, L.review_scores_rating,
H.neighbourhood_group
FROM Listings as L
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
"))
listings <- listings_bd %>% collect()
head(listings)
listings <- as.data.frame(listings)
head(listings)
listings <- listings_bd %>% collect()
head(listings)
reviews_bd <- tbl(bd, sql("
SELECT H.neighbourhood_group, strftime('%Y-%m',
R.date) as mes, COUNT(R.comments) as num_reviews
FROM Reviews as R
INNER JOIN Listings as L ON R.listing_id = L.id
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
WHERE strftime('%Y', R.date) > '2010'
GROUP BY H.neighbourhood_group, mes
"))
reviews <- reviews_bd %>% collect()
head(reviews)
listings <- listings %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
head(listings)
print(listings$price, n=1000)
listing
listings$price
max.print(listings$price)
head(listings)
cols <- c("number_of_reviews", "review_scores_rating")
#Bucle para que realice las operaciones en cada una de las columnas
for (j in cols){
#Bucle para que pase cada fila
for(i in seq_along(listings[[j]])){
#Si el valor es NA
if (is.na(listings[[j]])[i] == TRUE){
#Calculo lo que vale room_type
value_rt <- listings$room_type[i]
#Genero un numero aleatorio en funcion del valor de room_type
new_value <- sample(na.omit(listings[[j]][
listings$room_type == value_rt]), 1)
#Asigno el numero aleatorio
listings[[j]][i] <- new_value
}
}
}
head(listings)
listings_agg <- listings %>%
group_by(neighbourhood_group, room_type) %>%
summarise(media_ponderada = weighted.mean(review_scores_rating,
number_of_reviews),
price_mediana = median(price),
num_alojam = n())
head(listings_agg)
listings_agg
#Calculo la prediccion filtrando por el mes de julio en el data frame original
#y cambiando la columna de mes para que sea agosto
prediccion_ag <- reviews %>%
filter(mes == '2021-07') %>%
mutate(mes = '2021-08')
#A単ado la prediccion al data frame original
reviews <- bind_rows(reviews, prediccion_ag)
#Ordeno el data frame
reviews <- reviews %>%
arrange(neighbourhood_group, mes)
tail(reviews)
tail(reviews)
#Vector con todas las fechas, desde enero 2011 a agosto 2021
fechas <- strftime(seq(as.Date("2011-01-01"), as.Date("2021-08-01"),
by = "month"), '%Y-%m')
#Vector con los distritos
distritos <- unique(reviews$neighbourhood_group)
fechas
distritos
#Creo un data frame con los vectores anteriores
reviews_agg <- data.frame(fechas, rep(distritos, length(fechas)))
colnames(reviews_agg) <- c("mes", "neighbourhood_group")
#Hago full join para unir los datos del df original por las columnas de
# neighbourhood_group y mes y ordeno las columnas en funcion del mes y distrito
reviews_agg <- reviews_agg %>%
full_join(reviews, by=c("neighbourhood_group", "mes")) %>%
arrange(neighbourhood_group, mes)
reviews_agg
#Como resultado de lo anterior hay NA en la columna num_reviews, los sustituyo
#por 0
reviews_agg$num_reviews[is.na(reviews_agg$num_reviews)] <- 0
head(reviews_agg)
#Cargo las tablas
dbWriteTable(bd, "distrib_alojam", listings_agg)
dbWriteTable(bd, "num_reviews_pred", reviews_agg)
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
tbl(bd, sql("SELECT * FROM num_reviews_pred LIMIT 10"))
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
tbl(bd, sql("SELECT * FROM num_reviews_pred LIMIT 10"))
#Librerias
library(dplyr)
library(DBI)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
listings_bd <- tbl(bd, sql("
SELECT L.id, L.room_type, L.price,
L.number_of_reviews, L.review_scores_rating,
H.neighbourhood_group
FROM Listings as L
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
"))
listings <- listings_bd %>% collect()
head(listings)
reviews_bd <- tbl(bd, sql("
SELECT H.neighbourhood_group, strftime('%Y-%m',
R.date) as mes, COUNT(R.comments) as num_reviews
FROM Reviews as R
INNER JOIN Listings as L ON R.listing_id = L.id
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
WHERE strftime('%Y', R.date) > '2010'
GROUP BY H.neighbourhood_group, mes
"))
reviews <- reviews_bd %>% collect()
head(reviews)
listings <- listings %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
head(listings)
listings
print(listings[["price"]])
cols <- c("number_of_reviews", "review_scores_rating")
#Bucle para que realice las operaciones en cada una de las columnas
for (j in cols){
#Bucle para que pase cada fila
for(i in seq_along(listings[[j]])){
#Si el valor es NA
if (is.na(listings[[j]])[i] == TRUE){
#Calculo lo que vale room_type
value_rt <- listings$room_type[i]
#Genero un numero aleatorio en funcion del valor de room_type
new_value <- sample(na.omit(listings[[j]][
listings$room_type == value_rt]), 1)
#Asigno el numero aleatorio
listings[[j]][i] <- new_value
}
}
}
head(listings)
is.na(listings$number_of_reviews)
any(is.na(listings$number_of_reviews))
any(is.na(listings$price))
any(is.na(listings$review_scores_rating))
listings_agg <- listings %>%
group_by(neighbourhood_group, room_type) %>%
#A単ado 3 columnas, media ponderada, precio mediano y numero de alojamientos
summarise(media_ponderada = weighted.mean(review_scores_rating,
number_of_reviews),
price_mediana = median(price),
num_alojam = n())
head(listings_agg)
#Calculo la prediccion filtrando por el mes de julio en el data frame original
#y cambiando la columna de mes para que sea agosto
prediccion_ag <- reviews %>%
filter(mes == '2021-07') %>%
mutate(mes = '2021-08')
#A単ado la prediccion al data frame original
reviews <- bind_rows(reviews, prediccion_ag)
#Ordeno el data frame
reviews <- reviews %>%
arrange(neighbourhood_group, mes)
tail(reviews)
#Vector con todas las fechas, desde enero 2011 a agosto 2021
fechas <- strftime(seq(as.Date("2011-01-01"), as.Date("2021-08-01"),
by = "month"), '%Y-%m')
#Vector con los distritos
distritos <- unique(reviews$neighbourhood_group)
#Creo un data frame con los vectores anteriores
reviews_agg <- data.frame(fechas, rep(distritos, length(fechas)))
colnames(reviews_agg) <- c("mes", "neighbourhood_group")
#Hago full join para unir los datos del df original por las columnas de
# neighbourhood_group y mes y ordeno las columnas en funcion del mes y distrito
reviews_agg <- reviews_agg %>%
full_join(reviews, by=c("neighbourhood_group", "mes")) %>%
arrange(neighbourhood_group, mes)
#Como resultado de lo anterior hay NA en la columna num_reviews, los sustituyo
#por 0
reviews_agg$num_reviews[is.na(reviews_agg$num_reviews)] <- 0
head(reviews_agg)
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
#Cargo las tablas
dbWriteTable(bd, "distrib_alojam", listings_agg)
dbWriteTable(bd, "num_reviews_pred", reviews_agg)
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
tbl(bd, sql("SELECT * FROM num_reviews_pred LIMIT 10"))
#Librerias
library(dplyr)
library(DBI)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
listings_bd <- tbl(bd, sql("
SELECT L.id, L.room_type, L.price,
L.number_of_reviews, L.review_scores_rating,
H.neighbourhood_group
FROM Listings as L
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
"))
listings <- listings_bd %>% collect()
head(listings)
reviews_bd <- tbl(bd, sql("
SELECT H.neighbourhood_group, strftime('%Y-%m',
R.date) as mes, COUNT(R.comments) as num_reviews
FROM Reviews as R
INNER JOIN Listings as L ON R.listing_id = L.id
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
WHERE strftime('%Y', R.date) > '2010'
GROUP BY H.neighbourhood_group, mes
"))
reviews <- reviews_bd %>% collect()
head(reviews)
listings <- listings %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
head(listings)
cols <- c("number_of_reviews", "review_scores_rating")
#Bucle para que realice las operaciones en cada una de las columnas
for (j in cols){
#Bucle para que pase cada fila
for(i in seq_along(listings[[j]])){
#Si el valor es NA
if (is.na(listings[[j]])[i] == TRUE){
#Calculo lo que vale room_type
value_rt <- listings$room_type[i]
#Genero un numero aleatorio en funcion del valor de room_type
new_value <- sample(na.omit(listings[[j]][
listings$room_type == value_rt]), 1)
#Asigno el numero aleatorio
listings[[j]][i] <- new_value
}
}
}
#Compruebo si no hay NAs
any(is.na(listings$number_of_reviews))
any(is.na(listings$review_scores_rating))
head(listings)
listings_agg <- listings %>%
group_by(neighbourhood_group, room_type) %>%
#A単ado 3 columnas: media ponderada, precio mediano y numero de alojamientos
summarise(media_ponderada = weighted.mean(review_scores_rating,
number_of_reviews),
price_mediana = median(price),
num_alojam = n())
head(listings_agg)
#Calculo la prediccion filtrando por el mes de julio en el data frame original
#y cambiando la columna de mes para que sea agosto
prediccion_ag <- reviews %>%
filter(mes == '2021-07') %>%
mutate(mes = '2021-08')
#A単ado la prediccion al data frame original
reviews <- bind_rows(reviews, prediccion_ag)
#Ordeno el data frame
reviews <- reviews %>%
arrange(neighbourhood_group, mes)
tail(reviews)
#Vector con todas las fechas, desde enero 2011 a agosto 2021
fechas <- strftime(seq(as.Date("2011-01-01"), as.Date("2021-08-01"),
by = "month"), '%Y-%m')
#Vector con los distritos
distritos <- unique(reviews$neighbourhood_group)
#Creo un data frame con los vectores anteriores
reviews_agg <- data.frame(fechas, rep(distritos, length(fechas)))
colnames(reviews_agg) <- c("mes", "neighbourhood_group")
#Hago full join para unir los datos del df original por las columnas de
# neighbourhood_group y mes y ordeno las columnas en funcion del mes y distrito
reviews_agg <- reviews_agg %>%
full_join(reviews, by=c("neighbourhood_group", "mes")) %>%
arrange(neighbourhood_group, mes)
#Como resultado de lo anterior hay NA en la columna num_reviews, los sustituyo
#por 0
reviews_agg$num_reviews[is.na(reviews_agg$num_reviews)] <- 0
head(reviews_agg)
#Cargo las tablas
dbWriteTable(bd, "distrib_alojam", listings_agg)
#Librerias
library(dplyr)
library(DBI)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
listings_bd <- tbl(bd, sql("
SELECT L.id, L.room_type, L.price,
L.number_of_reviews, L.review_scores_rating,
H.neighbourhood_group
FROM Listings as L
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
"))
listings <- listings_bd %>% collect()
head(listings)
reviews_bd <- tbl(bd, sql("
SELECT H.neighbourhood_group, strftime('%Y-%m',
R.date) as mes, COUNT(R.comments) as num_reviews
FROM Reviews as R
INNER JOIN Listings as L ON R.listing_id = L.id
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
WHERE strftime('%Y', R.date) > '2010'
GROUP BY H.neighbourhood_group, mes
"))
reviews <- reviews_bd %>% collect()
head(reviews)
listings <- listings %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
head(listings)
cols <- c("number_of_reviews", "review_scores_rating")
#Bucle para que realice las operaciones en cada una de las columnas
for (j in cols){
#Bucle para que pase cada fila
for(i in seq_along(listings[[j]])){
#Si el valor es NA
if (is.na(listings[[j]])[i] == TRUE){
#Calculo lo que vale room_type
value_rt <- listings$room_type[i]
#Genero un numero aleatorio en funcion del valor de room_type
new_value <- sample(na.omit(listings[[j]][
listings$room_type == value_rt]), 1)
#Asigno el numero aleatorio
listings[[j]][i] <- new_value
}
}
}
#Compruebo si no hay NAs
any(is.na(listings$number_of_reviews))
any(is.na(listings$review_scores_rating))
head(listings)
listings_agg <- listings %>%
group_by(neighbourhood_group, room_type) %>%
#A単ado 3 columnas: media ponderada, precio mediano y numero de alojamientos
summarise(media_ponderada = weighted.mean(review_scores_rating,
number_of_reviews),
price_mediana = median(price),
num_alojam = n())
head(listings_agg)
#Calculo la prediccion filtrando por el mes de julio en el data frame original
#y cambiando la columna de mes para que sea agosto
prediccion_ag <- reviews %>%
filter(mes == '2021-07') %>%
mutate(mes = '2021-08')
#A単ado la prediccion al data frame original
reviews <- bind_rows(reviews, prediccion_ag)
#Ordeno el data frame
reviews <- reviews %>%
arrange(neighbourhood_group, mes)
tail(reviews)
#Vector con todas las fechas, desde enero 2011 a agosto 2021
fechas <- strftime(seq(as.Date("2011-01-01"), as.Date("2021-08-01"),
by = "month"), '%Y-%m')
#Vector con los distritos
distritos <- unique(reviews$neighbourhood_group)
#Creo un data frame con los vectores anteriores
reviews_agg <- data.frame(fechas, rep(distritos, length(fechas)))
colnames(reviews_agg) <- c("mes", "neighbourhood_group")
#Hago full join para unir los datos del df original por las columnas de
# neighbourhood_group y mes y ordeno las columnas en funcion del mes y distrito
reviews_agg <- reviews_agg %>%
full_join(reviews, by=c("neighbourhood_group", "mes")) %>%
arrange(neighbourhood_group, mes)
#Como resultado de lo anterior hay NA en la columna num_reviews, los sustituyo
#por 0
reviews_agg$num_reviews[is.na(reviews_agg$num_reviews)] <- 0
head(reviews_agg)
#Cargo las tablas
dbWriteTable(bd, "distrib_alojam", listings_agg)
dbWriteTable(bd, "num_reviews_pred", reviews_agg)
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
tbl(bd, sql("SELECT * FROM num_reviews_pred LIMIT 10"))
reviews_agg
#Librerias
library(dplyr)
library(DBI)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
tbl(bd, sql("SELECT * FROM num_reviews_pred LIMIT 10"))
#Librerias
library(dplyr)
library(DBI)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
#Compruebo
tbl(bd, sql("SELECT * FROM distrib_alojam LIMIT 10"))
tbl(bd, sql("SELECT * FROM num_reviews_pred LIMIT 10"))
#Librerias
library(dplyr)
library(DBI)
library(stats)
#Base de datos
bd <- dbConnect(RSQLite::SQLite(), "airbnb.sqlite")
DBI::dbListTables(bd)
listings_bd <- tbl(bd, sql("
SELECT L.id, L.room_type, L.price,
L.number_of_reviews, L.review_scores_rating,
H.neighbourhood_group
FROM Listings as L
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
"))
listings <- listings_bd %>% collect()
head(listings)
reviews_bd <- tbl(bd, sql("
SELECT H.neighbourhood_group, strftime('%Y-%m',
R.date) as mes, COUNT(R.comments) as num_reviews
FROM Reviews as R
INNER JOIN Listings as L ON R.listing_id = L.id
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
WHERE strftime('%Y', R.date) > '2010'
GROUP BY H.neighbourhood_group, mes
"))
reviews <- reviews_bd %>% collect()
head(reviews)
listings <- listings %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
head(listings)
listings$price
class(listings$price)
listings_bd <- tbl(bd, sql("
SELECT L.id, L.room_type, L.price,
L.number_of_reviews, L.review_scores_rating,
H.neighbourhood_group
FROM Listings as L
INNER JOIN Hoods as H ON
L.neighbourhood_cleansed = H.neighbourhood
"))
listings <- listings_bd %>% collect()
listings$price
listings <- listings %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
listings$price
max(listings$price)
print(listings$price, n=100)
print(listings$price, n=100, na.print = False)
